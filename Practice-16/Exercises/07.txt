The following loop is supposed to delete all nodes from a linked list and
release the memory that they occupy. Unfortunately, the loop is incorrect.
Explain what's wrong with it and how to fix the bug.

for (p = first; p != NULL; p = p->next)
    free(p);

The problem is that we are freeing the memory allocated to p, and then attempting
to call p = p->next. Since p is a dangling pointer after deallocation its
behaviour is undefined. 

We can fix this in two ways:

Firstly we can use create a temp pointer, giving it the value p.
We can then advance p to the next node, and finally free the memory that temp
points to as p no longer points there:

struct node *temp;

while (p != NULL) {
    temp = p;
    p = p->next;
    free(temp);
}

A second way we can do this is to use a next_node pointer, giving it the value
p->next. We can then free the memory pointed to by p, and afterwards assign
p the next_node pointer so that it points to the next node:

struct node *next_node;

while (p != NULL) {
    next_node = p->next;
    free(p);
    p = next_node;
}
